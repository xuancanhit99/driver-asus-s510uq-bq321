<?xml version="1.0" encoding="utf-8"?>
<nvi name="ShadowPlay" title="${{title}}" version="${{version}}" versionText="${{version}}" timestamp="2017-02-23T08:27:20" disposition="default" hidden="true" installerMin="2.1002.244.2070">
	<filter name="64BitPlatform" platform="amd64"/>
	<filter name="${{IsBetaPackage}}"/>
	<dependencies>
		<package type="requires" package="VirtualAudio.Driver"/>
		<package type="requires" package="NvContainer"/>
		<package type="requires" package="NvContainer.LocalSystem"/>
		<package type="requires" package="NvContainer.MessageBus"/>
		<package type="requires" package="NvNodejs"/>
	</dependencies>
	<constraints>
		<os min="6.1" level="silent" text="${{title}} requires Windows 7 or later."/>
	</constraints>
	<description/>
	<extensions>
		<extension file="ShadowPlayExt.DLL"/>
	</extensions>
	<properties>
		<bool name="FixedInstallLocation" value="true"/>
		<string name="InstallLocation" value="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}"/>
		<string name="ArpDisplayName" value="${{arpDisplayName}}"/>
		<string name="ServerProxyDllx86" value="${{shadowPlayProxyDllNameX86}}"/>
		<string name="ServerProxyDllx86Path" value="${{shadowPlayProxyDllx86TargetPath}}"/>
		<string name="ServerBinaryName" value="${{nvscapsBinaryName}}"/>
		<bool name="IsGFExperienceComponent" value="true"/>
		<bool name="IsQuadroExperienceComponent" value="true"/>
		<bool name="ShadowPlayOverinstall" value="true"/>
		<int name="StopCaptureServerTimeOutMs" value="8000"/>
		<bool name="ServiceAutoStart" value="false"/>
		<bool name="NvContainerUnloaded" value="true"/>
		<string name="ShareExeName" value="NVIDIA Share.exe"/>
		<int name="ShareShutdownTimeoutMs" value="15000"/>
		<bool name="ShareForceKill" value="true"/>
		<if filter="beta">
			<bool name="UsesNvContainer" value="true"/>
		</if>
	</properties>
	<manifest>
		<file name="ShadowPlay.nvi"/>
		<file name="ShadowPlayExt.DLL"/>
		<file name="cudart32_55.dll"/>
		<file name="cudart64_55.dll"/>
		<file name="DXSETUP.exe"/>
		<file name="nvsphelper.exe"/>
		<file name="nvsphelper64.exe"/>
		<file name="nvsphelperplugin.dll"/>
		<file name="nvsphelperplugin64.dll"/>
		<file name="NvRemux.dll"/>
		<file name="NvRemux64.dll"/>
		<file name="NvRtmpStreamer32.dll"/>
		<file name="NvRtmpStreamer64.dll"/>
		<file name="ipccommon.dll"/>
		<file name="ipccommon64.dll"/>
		<file name="capcore.dll"/><file name="capcore64.dll"/><file name="DSETUP.dll"/><file name="dsetup32.dll"/><file name="dxupdate.cab"/><file name="Jun2010_d3dx10_43_x64.cab"/><file name="Jun2010_d3dx10_43_x86.cab"/><file name="Jun2010_d3dx11_43_x64.cab"/><file name="Jun2010_d3dx11_43_x86.cab"/><file name="Jun2010_d3dx9_43_x64.cab"/><file name="Jun2010_d3dx9_43_x86.cab"/><file name="nvspbridge.dll"/><file name="nvspbridge64.dll"/><file name="nvspcap.dll"/><file name="nvspcap64.dll"/><file name="nvspcaps.exe"/><file name="nvspcaps64.exe"/><file name="_nvspserviceplugin.dll"/><file name="_nvspserviceplugin64.dll"/></manifest>
	<phases>
		<exe phase="killStaleCaptureServer" name="${{SystemDirectory}}\taskkill.exe" when="install" onError="ignore">
			<arg value="/f /im ${{nvscapsBinaryName}}" quote="none"/>
		</exe>
		<standard phase="deleteShareCache" when="uninstall" onError="ignore">
			<deleteDirectoryTree target="${{LocalUserAppData}}\NVIDIA Corporation\NVIDIA Share"/>
		</standard>
		<standard phase="deleteRegKeys" when="uninstall" onError="ignore">
			<deleteRegistryKeyTree keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Info"/>
			<deleteRegistryKeyTree keyName="${{NvidiaPerUserSoftwareKey}}\Global\ShadowPlay\Info"/>
		</standard>
		<custom phase="CheckIfCleanupRequired" action="CheckIfCleanupRequired" when="install" condition="UsesNvContainer"/>
		<exe phase="unRegisterNvscapsBinary" name="${{InstallLocation}}\${{nvscapsBinaryName}}" condition="CleanupRequired" when="install" onError="ignore">
			<arg value="/UnRegServer"/>
		</exe>
		<standard phase="cleanupOldShadowPlay" when="install" condition="CleanupRequired">
			<if filter="64BitPlatform">
				<deleteDirectoryTree target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}"/>
			</if>
			<deleteDirectoryTree target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}"/>
		</standard>
		<standard phase="crashDumpKeyCleanUp" when="install" OnError="ignore">
			<if filter="64BitPlatform">
				<deleteRegistry keyName="${{crashDumpKey}}\nvshelper64.exe" valueName="DumpFolder"/>
				<deleteRegistry keyName="${{crashDumpKey}}\nvshelper64.exe" valueName="DumpCount"/>
				<deleteRegistry keyName="${{crashDumpKey}}\nvshelper64.exe" valueName="DumpType"/>
				<deleteRegistryKey keyName="${{crashDumpKey}}\nvshelper64.exe"/>
				<else>
					<deleteRegistry keyName="${{crashDumpKey}}\nvshelper.exe" valueName="DumpFolder"/>
					<deleteRegistry keyName="${{crashDumpKey}}\nvshelper.exe" valueName="DumpCount"/>
					<deleteRegistry keyName="${{crashDumpKey}}\nvshelper.exe" valueName="DumpType"/>
					<deleteRegistryKey keyName="${{crashDumpKey}}\nvshelper.exe"/>
				</else>
			</if>
		</standard>
		<standard phase="createCrashDumpGenerationKeys">
			<if filter="64BitPlatform">
				<addRegistry keyName="${{crashDumpKey}}\nvsphelper64.exe"/>
				<addRegistry keyName="${{crashDumpKey}}\nvsphelper64.exe" valueName="DumpFolder" type="REG_EXPAND_SZ" value="%PROGRAMDATA%\NVIDIA Corporation\CrashDumps"/>
				<addRegistry keyName="${{crashDumpKey}}\nvsphelper64.exe" valueName="DumpCount" type="REG_DWORD" value="15"/>
				<addRegistry keyName="${{crashDumpKey}}\nvsphelper64.exe" valueName="DumpType" type="REG_DWORD" value="1"/>
				<else>
					<addRegistry keyName="${{crashDumpKey}}\nvsphelper.exe"/>
					<addRegistry keyName="${{crashDumpKey}}\nvsphelper.exe" valueName="DumpFolder" type="REG_EXPAND_SZ" value="%PROGRAMDATA%\NVIDIA Corporation\CrashDumps"/>
					<addRegistry keyName="${{crashDumpKey}}\nvsphelper.exe" valueName="DumpCount" type="REG_DWORD" value="15"/>
					<addRegistry keyName="${{crashDumpKey}}\nvsphelper.exe" valueName="DumpType" type="REG_DWORD" value="1"/>
				</else>
			</if>
		</standard>
		<standard phase="createDirectories">
			<createDirectory target="${{InstallLocation}}"/>
		</standard>
		<standard phase="copyFilesX86" platform="x86">
			<copyFile target="${{shadowPlayProxyDllx86TargetPath}}" source="${{shadowPlayProxyDllNameX86}}"/>
		</standard>
		<standard phase="deleteFiles" onError="ignore" when="install">
			<if filter="64BitPlatform">
				<deleteFile target="${{NvidiaProgramFiles}}\${{LegacyPluginFolder}}\nvspserviceplugin64.dll"/>
				<deleteFile target="${{NvidiaProgramFiles}}\${{LegacyPluginFolder}}\_nvspserviceplugin64.dll"/>
				<deleteFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\_nvspserviceplugin64.dll"/>
				<else>
					<deleteFile target="${{NvidiaProgramFiles}}\${{LegacyPluginFolder}}\nvspserviceplugin.dll"/>
					<deleteFile target="${{NvidiaProgramFiles}}\${{LegacyPluginFolder}}\_nvspserviceplugin.dll"/>
					<deleteFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\_nvspserviceplugin.dll"/>
				</else>
			</if>
		</standard>
		<standard phase="copyFiles">
			<if filter="64BitPlatform">
				<copyFile target="${{shadowPlayProxyDllx64TargetPath}}" source="${{shadowPlayProxyDllNameX64}}"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\cudart64_55.dll" source="cudart64_55.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvsphelper64.exe" source="nvsphelper64.exe"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvsphelperplugin64.dll" source="nvsphelperplugin64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\NvRemux64.dll" source="NvRemux64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\NvRemux.dll" source="NvRemux.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{ContainerFolderName}}\ipccommon64.dll" source="ipccommon64.dll"/>
				<copyFile target="${{NvidiaProgramFilesX86}}\${{ContainerFolderName}}\ipccommon.dll" source="ipccommon.dll"/>
				<copyFile target="${{SystemDirectory}}\NvRtmpStreamer64.dll" source="NvRtmpStreamer64.dll"/>
				<else>
					<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\cudart32_55.dll" source="cudart32_55.dll"/>
					<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvsphelper.exe" source="nvsphelper.exe"/>
					<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvsphelperplugin.dll" source="nvsphelperplugin.dll"/>
					<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\NvRemux.dll" source="NvRemux.dll"/>
					<copyFile target="${{NvidiaProgramFiles}}\${{ContainerFolderName}}\ipccommon.dll" source="ipccommon.dll"/>
					<copyFile target="${{SystemDirectory}}\NvRtmpStreamer32.dll" source="NvRtmpStreamer32.dll"/>
				</else>
			</if>
		</standard>
		<standard phase="setupNvContainerPlugin" when="install">
			<if filter="64BitPlatform">
				<copyFile target="${{nvspServicePluginFolderPath}}\_nvspserviceplugin64.dll" source="_nvspserviceplugin64.dll"/>
				<else>
					<copyFile target="${{nvspServicePluginFolderPath}}\_nvspserviceplugin.dll" source="_nvspserviceplugin.dll"/>
				</else>
			</if>
			<createDirectory target="${{NvidiaProgramFiles}}\${{PluginFolder}}" source="${{nvspServicePluginFolderPath}}" symLink="true"/>
		</standard>
		<if filter="beta">
			<standard phase="copyFiles" platform="amd64">
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvspapi64.dll" source="nvspapi64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\NVSPCAPS\_nvspcaps64.dll" source="_nvspcaps64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\capcore64.dll" source="capcore64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvmf64.dll" source="nvmf64.dll"/>
				<copyFile target="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\NvRtmpStreamer64.dll" source="NvRtmpStreamer64.dll"/>
				<deleteFile target="${{NvidiaProgramFilesX86}}\NvNode\NvSpCapsAPI.js"/>
				<deleteFile target="${{NvidiaProgramFilesX86}}\NvNode\NvSpCapsAPINode.node"/>
			</standard>
			<standard phase="copyFiles" platform="x86">
				<copyFile target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\nvspapi.dll" source="nvspapi.dll"/>
				<copyFile target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\NVSPCAPS\_nvspcaps.dll" source="_nvspcaps.dll"/>
				<copyFile target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\capcore.dll" source="capcore.dll"/>
				<copyFile target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\nvmf.dll" source="nvmf.dll"/>
				<copyFile target="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\NvRtmpStreamer32.dll" source="NvRtmpStreamer32.dll"/>
				<deleteFile target="${{NvidiaProgramFilesX86}}\NvNode\NvSpCapsAPI.js"/>
				<deleteFile target="${{NvidiaProgramFilesX86}}\NvNode\NvSpCapsAPINode.node"/>
			</standard>
			<standard phase="deleteAppData" onError="ignore" when="uninstall">
				<deleteFile target="${{LogBaseFilePath}}*.log*" waitForUnlock="${{LogFileWaitForUnlockPeriod}}"/>
			</standard>
			<standard phase="createTempContainerRegkeyX86">
				<addRegistry keyName="${{WatchdogRegistryKey}}\SPUserX86" valueName="" value="Temp - SP User Plugins (x86)" type="REG_SZ"/>
				<addRegistry keyName="${{WatchdogRegistryKey}}\SPUserX86" valueName="Folder" value="${{PluginFolderNameX86SP}}" type="REG_SZ"/>
				<addRegistry keyName="${{WatchdogRegistryKey}}\SPUserX86" valueName="Container" value="${{ContainerPathX86}}" type="REG_SZ"/>
				<addRegistry keyName="${{WatchdogRegistryKey}}\SPUserX86" valueName="Parameters" value="-f &quot;${{LogBaseFilePath}}%d.log&quot; -d &quot;${{PluginFolderNameX86SP}}&quot; -r -l ${{LogLevel}} -p ${{StateTransitionMaxTime}}" type="REG_SZ"/>
				<addRegistry keyName="${{WatchdogRegistryKey}}\SPUserX86" valueName="Policy" value="${{RestartPolicy}}" type="REG_SZ"/>
			</standard>
			<standard phase="createTempPluginDir">
				<createDirectory target="${{PluginFolderNameX86SP}}"/>
			</standard>
			<else>
				<standard phase="createCrashDumpGenerationKeys">
					<addRegistry keyName="${{crashDumpKey}}\${{nvscapsBinaryName}}"/>
					<addRegistry keyName="${{crashDumpKey}}\${{nvscapsBinaryName}}" valueName="DumpFolder" type="REG_EXPAND_SZ" value="%PROGRAMDATA%\NVIDIA Corporation\CrashDumps"/>
					<addRegistry keyName="${{crashDumpKey}}\${{nvscapsBinaryName}}" valueName="DumpCount" type="REG_DWORD" value="15"/>
					<addRegistry keyName="${{crashDumpKey}}\${{nvscapsBinaryName}}" valueName="DumpType" type="REG_DWORD" value="1"/>
				</standard>
				<standard phase="copyFilesX86" platform="x86">
					<copyFile target="${{SystemDirectory}}\nvspbridge.dll" source="nvspbridge.dll"/>
				</standard>
				<standard phase="copyFiles">
					<copyFile target="${{nvscapsBinaryName}}"/>
					<if filter="64BitPlatform">
						<copyFile target="${{SystemDirectory}}\nvspbridge64.dll" source="nvspbridge64.dll"/>
					</if>
				</standard>
			</else>
		</if>
		<standard phase="deleteVideoRecordingKeysKey" onError="ignore">
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey0"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey1"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey2"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey3"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey4"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey5"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey6"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey7"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey8"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKey9"/>
			<deleteRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="ManualHKeyCount"/>
			<deleteRegistryKey keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides"/>
			<deleteRegistryKey keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay"/>
		</standard>
		<custom phase="createVideoRecordingKeys" action="createVideoRecordingKeys" when="install"/>
		<standard phase="addManualRecordingModeSetting" condition="IsRecordingModeManual">
			<addRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="RecordingMode" value="RecManual" type="REG_SZ"/>
		</standard>
		<standard phase="addToggleMicModeSetting" condition="IsMicModeToggle">
			<addRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\Overrides" valueName="MicMode" value="2" type="REG_DWORD"/>
		</standard>
		<standard phase="enableShareScreenshot">
			<addRegistry keyName="${{NvidiaSoftwareKey}}\Global\ShadowPlay\FTS" valueName="{4BE02FC2-981D-48C5-AE4A-1DAA073123E6}" type="REG_BINARY" value="1"/>
		</standard>
		<standard phase="deleteObsoleteFBLKey" onError="ignore">
			<deleteRegistry keyName="${{NvidiaPerUserSoftwareKey}}\Global\ShadowPlay\NVSPCAPS" valueName="bcb55d3d-5836-4970-8655-940a0ba3c4cf"/>
			<deleteRegistry keyName="${{NvidiaPerUserSoftwareKey}}\Global\ShadowPlay\NVSPCAPS" valueName="1b1d9ef4-c08f-45cd-abad-d5d78796ea26"/>
			<deleteRegistry keyName="${{NvidiaPerUserSoftwareKey}}\Global\ShadowPlay\NVSPCAPS" valueName="e492fb57-2de0-47c9-b862-6be425383c5a"/>
			<deleteRegistry keyName="${{NvidiaPerUserSoftwareKey}}\Global\ShadowPlay\NVSPCAPS" valueName="a0f265ab-4ea1-4c6d-93fd-8d53a3218979"/>
		</standard>
		<custom phase="isDirectXInstalled" action="isDirectXInstalled" when="install" onError="ignore">
			<properties>
				<string name="directXDlls" value="d3dx9_43.dll,d3dx10_43.dll,d3dx11_43.dll"/>
			</properties>
		</custom>
		<exe phase="installDirectXRuntime" name="DXSETUP.exe" when="install" condition="!DirectXInstalled" progress="120" autoTick="200">
			<arg value="/silent"/>
			<success value="0"/>
			<success value="1" rebootNeeded="true"/>
		</exe>
		<standard phase="manageRegistryDataX86" platform="x86">
			<addRegistry keyName="${{NvidiaSoftwareKey}}\Global\NVSCAPS" valueName="ShadowPlayMode" value="None" valueType="REG_SZ"/>
		</standard>
		<if filter="beta">
			<standard phase="createProxyRunKey">
				<if filter="64BitPlatform">
					<addRegistry keyName="${{runKeyPath}}" valueName="${{title}}" value="&quot;${{rundll32Path}}&quot; &quot;${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\nvspapi64.dll&quot;,ShadowPlayOnSystemStart" valueType="REG_SZ"/>
					<else>
						<addRegistry keyName="${{runKeyPath}}" valueName="${{title}}" value="&quot;${{rundll32Path}}&quot; &quot;${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\nvspapi.dll&quot;,ShadowPlayOnSystemStart" valueType="REG_SZ"/>
					</else>
				</if>
			</standard>
			<custom phase="enableShadowPlay2OnInstall" action="enableShadowPlay2OnInstall" condition="EnableShadowPlay" when="installClose">
				<properties>
					<int name="TimeOutMs" value="60000"/>
					<string name="NvSpApiDllPath" value="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\nvspapi.dll"/>
				</properties>
			</custom>
			<else>
				<exe phase="registerNvscapsBinary" name="${{InstallLocation}}\${{nvscapsBinaryName}}" when="install">
					<arg value="/RegServer"/>
				</exe>
				<standard phase="createProxyRunKey">
					<if filter="64BitPlatform">
						<addRegistry keyName="${{runKeyPath}}" valueName="${{title}}" value="&quot;${{rundll32Path}}&quot; ${{shadowPlayProxyDllx64TargetPath}},ShadowPlayOnSystemStart" valueType="REG_SZ"/>
						<else>
							<addRegistry keyName="${{runKeyPath}}" valueName="${{title}}" value="&quot;${{rundll32Path}}&quot; ${{shadowPlayProxyDllx86TargetPath}},ShadowPlayOnSystemStart" valueType="REG_SZ"/>
						</else>
					</if>
				</standard>
				<custom phase="enableShadowPlayOnInstall" action="enableShadowPlayOnInstall" condition="EnableShadowPlay" when="installClose">
					<properties>
						<int name="TimeOutMs" value="60000"/>
					</properties>
				</custom>
			</else>
		</if>
		<standard phase="deleteNvContainerPluginFile" when="uninstall">
			<deleteDirectoryTree target="${{shadowPlayPluginsFolderPath}}" waitForUnlock="${{pluginDeleteMaxTimeout}}"/>
		</standard>
		<standard phase="deleteSymLink" when="uninstall">
			<deleteDirectory target="${{NvidiaProgramFiles}}\${{PluginFolder}}"/>
		</standard>
		<standard phase="deleteDataFiles" onError="ignore" when="uninstall">
			<deleteDirectoryTree target="${{LocalUserAppData}}\NVIDIA Corporation\${{shadowPlayAppFolderName}}"/>
			<deleteDirectoryTree target="${{CommonAppData}}\NVIDIA Corporation\${{shadowPlayAppFolderName}}"/>
		</standard>
		<if filter="beta">
			<custom phase="cleanup" action="cleanup" when="uninstall">
				<properties>
					<int name="TimeOutMs" value="60000"/>
					<string name="NvSpApiDllPath" value="${{NvidiaProgramFilesX86}}\${{shadowPlayAppFolderName}}\nvspapi.dll"/>
				</properties>
			</custom>
			<else>
				<exe phase="unRegisterNvscapsBinary" name="${{InstallLocation}}\${{nvscapsBinaryName}}" when="uninstall" onError="ignore">
					<arg value="/UnRegServer"/>
				</exe>
				<custom phase="callCleanupApi" action="callCleanupApi" when="uninstall" onError="ignore">
					<properties>
						<int name="TimeOutMs" value="8000"/>
					</properties>
				</custom>
				<custom phase="stopCaptureServer" action="stopCaptureServer" when="uninstall" onError="ignore" progress="40" autoTick="200"/>
			</else>
		</if>
	</phases>
	<strings>
		<string name="version" value="3.4.0.70"/>
		<string name="shadowPlayAppFolderName" value="ShadowPlay"/>
		<string name="shadowPlayPluginsFolderName" value="Plugins"/>
		<string name="shadowPlayPluginsFolderPath" value="${{NvidiaProgramFiles}}\${{shadowPlayAppFolderName}}\${{shadowPlayPluginsFolderName}}"/>
		<string name="nvspServicePluginFolderPath" value="${{shadowPlayPluginsFolderPath}}\LocalSystem"/>
		<string name="shadowPlayProxyDllNameX86" value="nvspcap.dll"/>
		<string name="shadowPlayProxyDllNameX64" value="nvspcap64.dll"/>
		<string name="crashDumpKey" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"/>
		<string name="runKeyPath" value="HKLM\Software\Microsoft\Windows\CurrentVersion\Run"/>
		<string name="rundll32Path" value="${{SystemDirectory}}\rundll32.exe"/>
		<string name="shadowPlayProxyDllx86TargetPath" value="${{SystemDirectory}}\${{shadowPlayProxyDllNameX86}}"/>
		<string name="shadowPlayProxyDllx64TargetPath" value="${{SystemDirectory}}\${{shadowPlayProxyDllNameX64}}"/>
		<string name="ContainerFolderName" value="NvContainer"/>
		<string name="LegacyPluginFolder" value="${{ContainerFolderName}}\plugins\LocalSystem"/>
		<string name="PluginFolder" value="${{ContainerFolderName}}\plugins\LocalSystem\ShadowPlay"/>
		<string name="InstallFolderNameX86" value="${{NvidiaProgramFilesX86}}\NvContainer"/>
		<string name="ContainerPathX86" value="${{InstallFolderNameX86}}\nvcontainer.exe"/>
		<string name="PluginFolderNameX86SP" value="${{InstallFolderNameX86}}\plugins\SPUser"/>
		<string name="WatchdogRegistryKey" value="${{NvidiaSoftwareKey}}\NvContainer\Watchdog"/>
		<string name="LogBaseFilePath" value="${{NvidiaCommonAppData}}\NvContainerUser"/>
		<string name="RestartPolicy" value="10/300/5"/>
		<string name="StateTransitionMaxTime" value="30000"/>
		<string name="LogFileWaitForUnlockPeriod" value="5000"/>
		<string name="LogLevel" value="3"/>
		<string name="pluginDeleteMaxTimeout" value="10000"/>
		<string name="ContainerBinaryName" value="nvcontainer.exe"/>
		<if filter="64BitPlatform">
			<string name="nvscapsBinaryName" value="nvspcaps64.exe"/>
			<string name="shadowPlayProxyDllPath" value="${{shadowPlayProxyDllx64TargetPath}}"/>
			<else>
				<string name="nvscapsBinaryName" value="nvspcaps.exe"/>
				<string name="shadowPlayProxyDllPath" value="${{shadowPlayProxyDllx86TargetPath}}"/>
			</else>
		</if>
		<localized locale="0x0409">
			<string name="title" value="ShadowPlay"/>
			<string name="arpDisplayName" value="NVIDIA ${{title}} ${{version}}"/>
		</localized>
	</strings>
	<include name="${{ResourcesDirectory}}\GFExperienceProgressText.cfg" select="/nvi/*"/>
	<include name="${{ResourcesDirectory}}\QuadroExperienceProgressText.cfg" select="/nvi/*"/>
	<signature><file name="nvspcap.dll" type="PE"/><file name="nvspcap64.dll" type="PE"/><file name="nvspbridge.dll" type="PE"/><file name="nvspbridge64.dll" type="PE"/><file name="nvsphelper.exe" type="PE"/><file name="nvsphelper64.exe" type="PE"/><file name="nvsphelperplugin.dll" type="PE"/><file name="nvsphelperplugin64.dll" type="PE"/><file name="ipccommon.dll" type="PE"/><file name="ipccommon64.dll" type="PE"/><file name="_nvspserviceplugin.dll" type="PE"/><file name="_nvspserviceplugin64.dll" type="PE"/><file name="capcore.dll" type="PE"/><file name="capcore64.dll" type="PE"/><file name="NvRemux.dll" type="PE"/><file name="NvRemux64.dll" type="PE"/><file name="NvRtmpStreamer32.dll" type="PE"/><file name="NvRtmpStreamer64.dll" type="PE"/></signature></nvi>
