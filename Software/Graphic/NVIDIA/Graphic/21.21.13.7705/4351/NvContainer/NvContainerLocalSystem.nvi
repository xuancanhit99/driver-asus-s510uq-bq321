<?xml version="1.0" encoding="utf-8"?>
<nvi name="${{PackageId}}" title="${{title}}" version="${{version}}" versionText="${{version}}" timestamp="${{timestamp}}" disposition="demand" hidden="true" installerMin="2.1002.234.2014">
	<strings>
		<string name="PackageId" value="NvContainer.LocalSystem"/>
		<string name="title" value="NVIDIA LocalSystem Container"/>
		<string name="ServiceName" value="NvContainerLocalSystem"/>
		<string name="InstallFolderName" value="${{NvidiaProgramFiles}}\NvContainer"/>
		<string name="ContainerPath" value="${{InstallFolderName}}\nvcontainer.exe"/>
		<string name="PluginFolderName" value="${{InstallFolderName}}\plugins\LocalSystem"/>
		<string name="RegistryKey" value="${{NvidiaSoftwareKey}}\NvContainer\${{ServiceName}}"/>
		<string name="nviName" value="NvContainerLocalSystem.nvi"/>
		<string name="RequiredPackage" value="NvContainer"/>
		<string name="description" value="Container service for NVIDIA root features"/>
		<string name="version" value="1.2"/>
		<string name="timestamp" value="2017-01-19T16:02:49"/>
		<string name="StateTransitionMaxTime" value="30000"/>
		<string name="ContainerLogFilePath" value="${{NvidiaCommonAppData}}\${{ServiceName}}.log"/>
		<string name="LogLevel" value="3"/>
		<string name="ContainerRecoveryScript" value="NvContainerRecovery.bat"/>
		<string name="RecoveryLogFilePath" value="${{NvidiaCommonAppData}}\NvContainerRecovery${{ServiceName}}.log"/>
		<string name="LogFileWaitForUnlockPeriod" value="5000"/>
	</strings>
	<dependencies>
		<package type="requires" package="${{RequiredPackage}}"/>
	</dependencies>
	<properties>
		<bool name="ServiceAutoStart" value="false"/>
		<bool name="ServiceStartByUsers" value="true"/>
		<bool name="ServiceConfigureAutoStart" value="true"/>
	</properties>
	<manifest>
		<file name="${{nviName}}"/>
		<file name="${{ContainerRecoveryScript}}"/>
	</manifest>
	<phases>
		<setPropertyIf phase="setStartType" boolProperty="ServiceAutoStart" value="true" when="install">
			<registryValue name="${{RegistryKey}}" value="ServiceAutoStart" check="exists"/>
		</setPropertyIf>
		<standard phase="deleteRegKey" when="uninstall" onError="ignore" platform="x86">
			<deleteRegistryKeyTree keyName="${{RegistryKey}}"/>
		</standard>
		<standard phase="deleteRegKey" when="uninstall" onError="ignore">
			<deleteRegistryKeyTree keyName="${{RegistryKey}}"/>
		</standard>
		<standard phase="createDirectories">
			<createDirectory target="${{PluginFolderName}}"/>
		</standard>
		<standard phase="createPluginDirectoryRegKey">
			<addRegistry keyName="${{NvidiaSoftwareKey}}\Global\${{ServiceName}}" valueName="PluginFolderPath" type="REG_SZ" value="${{PluginFolderName}}"/>
		</standard>
		<standard phase="deleteInstalledFiles" onError="ignore" when="uninstall">
			<deleteDirectoryTree target="${{PluginFolderName}}"/>
		</standard>
		<standard phase="deleteAppData" onError="ignore" when="uninstall">
			<deleteFile target="${{ContainerLogFilePath}}*" waitForUnlock="${{LogFileWaitForUnlockPeriod}}"/>
			<deleteFile target="${{RecoveryLogFilePath}}" waitForUnlock="${{LogFileWaitForUnlockPeriod}}"/>
		</standard>
		<standard phase="copyRecoveryScript">
			<copyFile target="${{SharedWindowsDirectory}}\${{ContainerRecoveryScript}}" source="${{ContainerRecoveryScript}}"/>
		</standard>
		<standard phase="installNvContainerLocalSystem" condition="ServiceAutoStart">
			<createService name="${{ServiceName}}" type="16" target="${{ContainerPath}}" argument="-s ${{ServiceName}} -f &quot;${{ContainerLogFilePath}}&quot; -l ${{LogLevel}} -d &quot;${{PluginFolderName}}&quot; -r -p ${{StateTransitionMaxTime}}" displayName="${{title}}" startCode="2" errorControl="0" description="${{description}}"/>
		</standard>
		<standard phase="installNvContainerLocalSystem" condition="!ServiceAutoStart &amp;&amp; !ServiceStartByUsers">
			<createService name="${{ServiceName}}" type="16" target="${{ContainerPath}}" argument="-s ${{ServiceName}} -f &quot;${{ContainerLogFilePath}}&quot; -l ${{LogLevel}} -d &quot;${{PluginFolderName}}&quot; -r -p ${{StateTransitionMaxTime}}" displayName="${{title}}" startCode="3" errorControl="0" description="${{description}}"/>
		</standard>
		<standard phase="installNvContainerLocalSystem" condition="!ServiceAutoStart &amp;&amp; ServiceStartByUsers">
			<createService name="${{ServiceName}}" allowStartToSids="S-1-5-11" type="16" target="${{ContainerPath}}" argument="-s ${{ServiceName}} -f &quot;${{ContainerLogFilePath}}&quot; -l ${{LogLevel}} -d &quot;${{PluginFolderName}}&quot; -r -p ${{StateTransitionMaxTime}}" displayName="${{title}}" startCode="3" errorControl="0" description="${{description}}"/>
		</standard>
		<standard phase="installNvContainerLocalSystem" condition="!ServiceAutoStart &amp;&amp; ServiceStartByUsers &amp;&amp; ServiceConfigureAutoStart">
			<createService name="${{ServiceName}}" allowStartToSids="S-1-5-11" type="16" target="${{ContainerPath}}" argument="-s ${{ServiceName}} -a -f &quot;${{ContainerLogFilePath}}&quot; -l ${{LogLevel}} -d &quot;${{PluginFolderName}}&quot; -r -p ${{StateTransitionMaxTime}}" displayName="${{title}}" startCode="3" errorControl="0" description="${{description}}"/>
		</standard>
		<exe phase="configureRecoveryNvContainerLocalSystem" onError="ignore" when="install" timeout="5000" name="${{SystemDirectory}}\sc.exe" dir="${{SystemDirectory}}">
			<arg value="failure"/>
			<arg value="${{ServiceName}}"/>
			<arg value="reset="/>
			<arg value="10"/>
			<arg value="command="/>
			<arg value="cmd.exe /C %windir%\${{ContainerRecoveryScript}} ${{ServiceName}} ${{NvidiaCommonAppData}}\NvContainerRecovery${{ServiceName}}.log"/>
			<arg value="actions="/>
			<arg value="restart/1000/restart/5000/run/10000"/>
		</exe>
		<exe phase="DeleteRecoveryPolicy" onError="ignore" when="uninstall" timeout="5000" name="${{SystemDirectory}}\sc.exe" dir="${{SystemDirectory}}">
			<arg value="failure"/>
			<arg value="${{ServiceName}}"/>
			<arg value="reset="/>
			<arg value="10"/>
			<arg value="command="/>
			<arg value=""/>
			<arg value="actions="/>
			<arg value=""/>
		</exe>
		<standard phase="startNvContainerLocalSystem" when="installClose" condition="ServiceAutoStart">
			<startService name="${{ServiceName}}" timeOut="${{StateTransitionMaxTime}}"/>
		</standard>
	</phases>
</nvi>
